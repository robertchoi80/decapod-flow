## Example workflow that calls delete-project template ##
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: remove-lma-federation
  namespace: argo
spec:
  entrypoint: process
  arguments:
    parameters:
    - name: app_prefix
      value: ""
    # Filter to filter argocd apps
    - name: filter
      value: "app=lma"
  templates:
  - name: process
    steps:
    - - name: disableAutoSyncOfPrometheus
        template: disableAutoSync

    # Delete prometheus CR first so that it doesn't hang
    # due to service-account deletion #
    - - name: removePrometheusCR
        template: removePrometheusCR
        arguments:
          parameters:
          - name: namespace
            value:  "lma"
          - name: kubeconfig_secret_name
            value: "{{workflow.parameters.app_prefix}}-kubeconfig"

    - - name: removeLMA
        templateRef:
          name: delete-apps
          template: DeleteAppsByLabel

      # LMA appGroup specific task #
    - - name: cleanupLeftoverResources
        template: removeLeftoverResources
        arguments:
          parameters:
          - name: namespace
            value:  "lma"

  #######################
  # Template Definition #
  #######################

  - name: disableAutoSync
    container:
      name: disable-auto-sync
      image: docker.io/sktcloud/argocd-cli:v2.2.5
      command:
        - /bin/bash
        - '-c'
        - |
          PROM_APP_NAME="prometheus"
          if [[ -n "{{workflow.parameters.app_prefix}}" ]]; then
            PROM_APP_NAME="{{workflow.parameters.app_prefix}}-prometheus"
          fi
          # Login to Argo CD server
          ./argocd login $ARGO_SERVER --plaintext --insecure --username $ARGO_USERNAME \
          --password $ARGO_PASSWORD

          echo "Disabling auto-sync of [$PROM_APP_NAME]' app.."

          # Disable auto-sync
          ./argocd app set $PROM_APP_NAME --sync-policy none
      envFrom:
        - secretRef:
            name: "decapod-argocd-config"

  - name: removePrometheusCR
    inputs:
      parameters:
        - name: namespace
        - name: kubeconfig_secret_name
    container:
      name: remove-prometheus-cr
      image: k8s.gcr.io/hyperkube:v1.18.6
      command:
        - /bin/bash
        - '-c'
        - |
          echo "Deleting prometheus CR..."
          echo "kubeconfig_secret: {{inputs.parameters.kubeconfig_secret_name}}."
          # Delete prometheus CR
          if [[ "{{inputs.parameters.kubeconfig_secret_name}}" == "-kubeconfig" ]]; then
            kubectl delete prometheus --all -n {{inputs.parameters.namespace}}
          else
            cat <<< "$KUBE_CONFIG" > /etc/kubeconfig
            kubectl --kubeconfig=/etc/kubeconfig delete prometheus --all -n {{inputs.parameters.namespace}}
          fi
      env:
      - name: KUBE_CONFIG
        valueFrom:
          secretKeyRef:
            name: "{{ inputs.parameters.kubeconfig_secret_name }}"
            key: value

  - name: removeLeftoverResources
    inputs:
      parameters:
        - name: namespace
    container:
      name: remove-leftover
      image: 'k8s.gcr.io/hyperkube:v1.18.6'
      command:
        - /bin/bash
        - '-c'
        - |
          kubectl delete secret etcd-client-cert prometheus-operator-admission -n {{inputs.parameters.namespace}} || true
          kubectl delete pvc --all -n {{inputs.parameters.namespace}}
